package com.cyb.tms.entity;

import java.util.Comparator;

// Generated May 17, 2016 12:38:28 PM by Hibernate Tools 4.3.1.Final

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.cyb.tms.entity.base.BaseEntity;

/**
 * UserStoryStaus generated by hbm2java
 */
@Entity
@Table(name = "user_story_staus", catalog = "TaskManagement")
public class UserStoryStaus extends BaseEntity implements Comparable<UserStoryStaus>{

	/**
	 * 
	 */
	private static final long serialVersionUID = -4728402203623134193L;
	private Long id;
	private TmsSprintMst tmsSprintMst;
	private TmsStatusMst tmsStatusMst;
	private TmsStoryMst tmsStoryMst;
	private TmsSubtask tmsSubtask;
	private TmsUsers tmsUsersByAssignedTo;
	private TmsUsers tmsUsersByModifiedBy;
	private Date modifiedDate;
	private String type;
	private Date assignedDate;
	private Date createdDate;

	public UserStoryStaus() {
	}

	

	public UserStoryStaus(Long id, TmsSprintMst tmsSprintMst, TmsStatusMst tmsStatusMst, TmsStoryMst tmsStoryMst,
			TmsSubtask tmsSubtask, TmsUsers tmsUsersByAssignedTo, TmsUsers tmsUsersByModifiedBy, Date modifiedDate,
			String type, Date assignedDate, Date createdDate) {
		super();
		this.id = id;
		this.tmsSprintMst = tmsSprintMst;
		this.tmsStatusMst = tmsStatusMst;
		this.tmsStoryMst = tmsStoryMst;
		this.tmsSubtask = tmsSubtask;
		this.tmsUsersByAssignedTo = tmsUsersByAssignedTo;
		this.tmsUsersByModifiedBy = tmsUsersByModifiedBy;
		this.modifiedDate = modifiedDate;
		this.type = type;
		this.assignedDate = assignedDate;
		this.createdDate = createdDate;
	}



	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "ID", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "SPRINT_ID")
	public TmsSprintMst getTmsSprintMst() {
		return this.tmsSprintMst;
	}

	public void setTmsSprintMst(TmsSprintMst tmsSprintMst) {
		this.tmsSprintMst = tmsSprintMst;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "STATUS", nullable = false)
	public TmsStatusMst getTmsStatusMst() {
		return this.tmsStatusMst;
	}

	public void setTmsStatusMst(TmsStatusMst tmsStatusMst) {
		this.tmsStatusMst = tmsStatusMst;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "STORY_ID")
	public TmsStoryMst getTmsStoryMst() {
		return this.tmsStoryMst;
	}

	public void setTmsStoryMst(TmsStoryMst tmsStoryMst) {
		this.tmsStoryMst = tmsStoryMst;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "SUBTASK_ID")
	public TmsSubtask getTmsSubtask() {
		return this.tmsSubtask;
	}

	public void setTmsSubtask(TmsSubtask tmsSubtask) {
		this.tmsSubtask = tmsSubtask;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ASSIGNED_TO")
	public TmsUsers getTmsUsersByAssignedTo() {
		return this.tmsUsersByAssignedTo;
	}

	public void setTmsUsersByAssignedTo(TmsUsers tmsUsersByAssignedTo) {
		this.tmsUsersByAssignedTo = tmsUsersByAssignedTo;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "MODIFIED_BY")
	public TmsUsers getTmsUsersByModifiedBy() {
		return this.tmsUsersByModifiedBy;
	}

	public void setTmsUsersByModifiedBy(TmsUsers tmsUsersByModifiedBy) {
		this.tmsUsersByModifiedBy = tmsUsersByModifiedBy;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "MODIFIED_DATE", length = 10)
	public Date getModifiedDate() {
		return this.modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		this.modifiedDate = modifiedDate;
	}

	@Column(name = "TYPE", nullable = false, length = 45)
	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "ASSIGNED_DATE", length = 10)
	public Date getAssignedDate() {
		return this.assignedDate;
	}

	public void setAssignedDate(Date assignedDate) {
		this.assignedDate = assignedDate;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "CREATED_DATE", length = 10)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((assignedDate == null) ? 0 : assignedDate.hashCode());
		result = prime * result + ((createdDate == null) ? 0 : createdDate.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((modifiedDate == null) ? 0 : modifiedDate.hashCode());
		result = prime * result + ((tmsSprintMst == null) ? 0 : tmsSprintMst.hashCode());
		result = prime * result + ((tmsStatusMst == null) ? 0 : tmsStatusMst.hashCode());
		result = prime * result + ((tmsStoryMst == null) ? 0 : tmsStoryMst.hashCode());
		result = prime * result + ((tmsSubtask == null) ? 0 : tmsSubtask.hashCode());
		result = prime * result + ((tmsUsersByAssignedTo == null) ? 0 : tmsUsersByAssignedTo.hashCode());
		result = prime * result + ((tmsUsersByModifiedBy == null) ? 0 : tmsUsersByModifiedBy.hashCode());
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		UserStoryStaus other = (UserStoryStaus) obj;
		if (assignedDate == null) {
			if (other.assignedDate != null)
				return false;
		} else if (!assignedDate.equals(other.assignedDate))
			return false;
		if (createdDate == null) {
			if (other.createdDate != null)
				return false;
		} else if (!createdDate.equals(other.createdDate))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (modifiedDate == null) {
			if (other.modifiedDate != null)
				return false;
		} else if (!modifiedDate.equals(other.modifiedDate))
			return false;
		if (tmsSprintMst == null) {
			if (other.tmsSprintMst != null)
				return false;
		} else if (!tmsSprintMst.equals(other.tmsSprintMst))
			return false;
		if (tmsStatusMst == null) {
			if (other.tmsStatusMst != null)
				return false;
		} else if (!tmsStatusMst.equals(other.tmsStatusMst))
			return false;
		if (tmsStoryMst == null) {
			if (other.tmsStoryMst != null)
				return false;
		} else if (!tmsStoryMst.equals(other.tmsStoryMst))
			return false;
		if (tmsSubtask == null) {
			if (other.tmsSubtask != null)
				return false;
		} else if (!tmsSubtask.equals(other.tmsSubtask))
			return false;
		if (tmsUsersByAssignedTo == null) {
			if (other.tmsUsersByAssignedTo != null)
				return false;
		} else if (!tmsUsersByAssignedTo.equals(other.tmsUsersByAssignedTo))
			return false;
		if (tmsUsersByModifiedBy == null) {
			if (other.tmsUsersByModifiedBy != null)
				return false;
		} else if (!tmsUsersByModifiedBy.equals(other.tmsUsersByModifiedBy))
			return false;
		if (type == null) {
			if (other.type != null)
				return false;
		} else if (!type.equals(other.type))
			return false;
		return true;
	}

	@Override
	public int compareTo(UserStoryStaus o) {
		return (int) (this.id - o.id);
	}
	
	
	public static final Comparator<UserStoryStaus> sortLatestStatus = new Comparator<UserStoryStaus>(){

        @Override
        public int compare(UserStoryStaus o1, UserStoryStaus o2) {
            return (int) (o1.id - o2.id);  // This will work because age is positive integer
        }
      
    };
	

}
